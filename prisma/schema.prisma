// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  billboards    Billboard[] // Relation to Billboard model
  categories    Category[] // Relation to Category model
  subcategories Subcategory[] // Relation to Subcategory model
  Brand         Brand[] // Relation to Brand model
  sizes         Size[] // Relation to Size model
  colors        Color[] // Relation to Color model
  products      Product[] // Relation to Product model
  Order         Order[]
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store      Store      @relation(fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[] // Relation to Category model
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  storeId     String        @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store       Store         @relation(fields: [storeId], references: [id])
  billboardId String        @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  billboard   Billboard     @relation(fields: [billboardId], references: [id])
  Subcategory Subcategory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // products    Product[] // Relation to Product model
}

// Define the Subcategory model
model Subcategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  storeId    String   @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store      Store    @relation(fields: [storeId], references: [id])
  categoryId String   @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  Brand      Brand[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Define the Brand model
model Brand {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  storeId       String      @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store         Store       @relation(fields: [storeId], references: [id])
  subcategoryId String      @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  // categoryId    String?     @db.ObjectId
  products      Product[] // Relation to Product model  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  brandId    String      @db.ObjectId
  brand      Brand       @relation(fields: [brandId], references: [id])
  sizeId     String      @db.ObjectId
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId
  color      Color       @relation(fields: [colorId], references: [id])
  name       String
  price      Int
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  OrderItem  OrderItem[] // Relation to OrderItem model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     Image[] // 
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  phone      String
  address    String
  isPaid     Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}
